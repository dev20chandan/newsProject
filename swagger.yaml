openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing user data

servers:
  - url: http://localhost:4000
    description: Local development server

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth2/authorize
          tokenUrl: https://example.com/oauth2/token
          scopes:
            user: Access user data
paths:
  /:
    post:
      summary: User login
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              example:
                accessToken: "your-access-token"
                refreshToken: "your-refresh-token"
                expiresIn: 3600
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: "your_username"
              password: "your_password"

  /auth/logout:
    post:
      summary: User logout
      responses:
        '204':
          description: User logged out

  /users:
    get:
      summary: Get a list of users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                users:
                  - id: 1
                    username: user1
                    email: user1@example.com
                    fullName: User One
                  - id: 2
                    username: user2
                    email: user2@example.com
                    fullName: User Two

    post:
      summary: Create a new user
      responses:
        '201':
          description: User created successfully
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: "new_user"
              email: "new_user@example.com"
              fullName: "New User"

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
        description: User ID

    get:
      summary: Get user by ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                id: 1
                username: user1
                email: user1@example.com
                fullName: User One

    put:
      summary: Update user by ID
      requestBody:
        required: true
        content:
          application/json:
            example:
              username: "updated_user"
              email: "updated_user@example.com"
              fullName: "Updated User"

      responses:
        '200':
          description: Successful response

    delete:
      summary: Delete user by ID
      responses:
        '204':
          description: User deleted
